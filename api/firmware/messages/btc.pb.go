// Code generated by protoc-gen-go. DO NOT EDIT.
// source: btc.proto

package messages

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type BTCCoin int32

const (
	BTCCoin_BTC  BTCCoin = 0
	BTCCoin_TBTC BTCCoin = 1
	BTCCoin_LTC  BTCCoin = 2
	BTCCoin_TLTC BTCCoin = 3
)

var BTCCoin_name = map[int32]string{
	0: "BTC",
	1: "TBTC",
	2: "LTC",
	3: "TLTC",
}

var BTCCoin_value = map[string]int32{
	"BTC":  0,
	"TBTC": 1,
	"LTC":  2,
	"TLTC": 3,
}

func (x BTCCoin) String() string {
	return proto.EnumName(BTCCoin_name, int32(x))
}

func (BTCCoin) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a38f9ffa5c78f451, []int{0}
}

type BTCOutputType int32

const (
	BTCOutputType_UNKNOWN BTCOutputType = 0
	BTCOutputType_P2PKH   BTCOutputType = 1
	BTCOutputType_P2SH    BTCOutputType = 2
	BTCOutputType_P2WPKH  BTCOutputType = 3
	BTCOutputType_P2WSH   BTCOutputType = 4
)

var BTCOutputType_name = map[int32]string{
	0: "UNKNOWN",
	1: "P2PKH",
	2: "P2SH",
	3: "P2WPKH",
	4: "P2WSH",
}

var BTCOutputType_value = map[string]int32{
	"UNKNOWN": 0,
	"P2PKH":   1,
	"P2SH":    2,
	"P2WPKH":  3,
	"P2WSH":   4,
}

func (x BTCOutputType) String() string {
	return proto.EnumName(BTCOutputType_name, int32(x))
}

func (BTCOutputType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a38f9ffa5c78f451, []int{1}
}

// SimpleType is a "simple" script: one public key, no additional inputs.
type BTCScriptConfig_SimpleType int32

const (
	BTCScriptConfig_P2WPKH_P2SH BTCScriptConfig_SimpleType = 0
	BTCScriptConfig_P2WPKH      BTCScriptConfig_SimpleType = 1
)

var BTCScriptConfig_SimpleType_name = map[int32]string{
	0: "P2WPKH_P2SH",
	1: "P2WPKH",
}

var BTCScriptConfig_SimpleType_value = map[string]int32{
	"P2WPKH_P2SH": 0,
	"P2WPKH":      1,
}

func (x BTCScriptConfig_SimpleType) String() string {
	return proto.EnumName(BTCScriptConfig_SimpleType_name, int32(x))
}

func (BTCScriptConfig_SimpleType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a38f9ffa5c78f451, []int{0, 0}
}

type BTCPubRequest_XPubType int32

const (
	BTCPubRequest_TPUB BTCPubRequest_XPubType = 0
	BTCPubRequest_XPUB BTCPubRequest_XPubType = 1
	BTCPubRequest_YPUB BTCPubRequest_XPubType = 2
	BTCPubRequest_ZPUB BTCPubRequest_XPubType = 3
	BTCPubRequest_VPUB BTCPubRequest_XPubType = 4
	BTCPubRequest_UPUB BTCPubRequest_XPubType = 5
)

var BTCPubRequest_XPubType_name = map[int32]string{
	0: "TPUB",
	1: "XPUB",
	2: "YPUB",
	3: "ZPUB",
	4: "VPUB",
	5: "UPUB",
}

var BTCPubRequest_XPubType_value = map[string]int32{
	"TPUB": 0,
	"XPUB": 1,
	"YPUB": 2,
	"ZPUB": 3,
	"VPUB": 4,
	"UPUB": 5,
}

func (x BTCPubRequest_XPubType) String() string {
	return proto.EnumName(BTCPubRequest_XPubType_name, int32(x))
}

func (BTCPubRequest_XPubType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a38f9ffa5c78f451, []int{1, 0}
}

type BTCSignNextResponse_Type int32

const (
	BTCSignNextResponse_INPUT  BTCSignNextResponse_Type = 0
	BTCSignNextResponse_OUTPUT BTCSignNextResponse_Type = 1
	BTCSignNextResponse_DONE   BTCSignNextResponse_Type = 2
)

var BTCSignNextResponse_Type_name = map[int32]string{
	0: "INPUT",
	1: "OUTPUT",
	2: "DONE",
}

var BTCSignNextResponse_Type_value = map[string]int32{
	"INPUT":  0,
	"OUTPUT": 1,
	"DONE":   2,
}

func (x BTCSignNextResponse_Type) String() string {
	return proto.EnumName(BTCSignNextResponse_Type_name, int32(x))
}

func (BTCSignNextResponse_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a38f9ffa5c78f451, []int{3, 0}
}

type BTCScriptConfig struct {
	// Types that are valid to be assigned to Config:
	//	*BTCScriptConfig_SimpleType_
	//	*BTCScriptConfig_MultisigP2Wsh
	Config               isBTCScriptConfig_Config `protobuf_oneof:"config"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *BTCScriptConfig) Reset()         { *m = BTCScriptConfig{} }
func (m *BTCScriptConfig) String() string { return proto.CompactTextString(m) }
func (*BTCScriptConfig) ProtoMessage()    {}
func (*BTCScriptConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a38f9ffa5c78f451, []int{0}
}

func (m *BTCScriptConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BTCScriptConfig.Unmarshal(m, b)
}
func (m *BTCScriptConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BTCScriptConfig.Marshal(b, m, deterministic)
}
func (m *BTCScriptConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BTCScriptConfig.Merge(m, src)
}
func (m *BTCScriptConfig) XXX_Size() int {
	return xxx_messageInfo_BTCScriptConfig.Size(m)
}
func (m *BTCScriptConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_BTCScriptConfig.DiscardUnknown(m)
}

var xxx_messageInfo_BTCScriptConfig proto.InternalMessageInfo

type isBTCScriptConfig_Config interface {
	isBTCScriptConfig_Config()
}

type BTCScriptConfig_SimpleType_ struct {
	SimpleType BTCScriptConfig_SimpleType `protobuf:"varint,1,opt,name=simple_type,json=simpleType,proto3,enum=BTCScriptConfig_SimpleType,oneof"`
}

type BTCScriptConfig_MultisigP2Wsh struct {
	MultisigP2Wsh *BTCScriptConfig_Multisig `protobuf:"bytes,2,opt,name=multisig_p2wsh,json=multisigP2wsh,proto3,oneof"`
}

func (*BTCScriptConfig_SimpleType_) isBTCScriptConfig_Config() {}

func (*BTCScriptConfig_MultisigP2Wsh) isBTCScriptConfig_Config() {}

func (m *BTCScriptConfig) GetConfig() isBTCScriptConfig_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *BTCScriptConfig) GetSimpleType() BTCScriptConfig_SimpleType {
	if x, ok := m.GetConfig().(*BTCScriptConfig_SimpleType_); ok {
		return x.SimpleType
	}
	return BTCScriptConfig_P2WPKH_P2SH
}

func (m *BTCScriptConfig) GetMultisigP2Wsh() *BTCScriptConfig_Multisig {
	if x, ok := m.GetConfig().(*BTCScriptConfig_MultisigP2Wsh); ok {
		return x.MultisigP2Wsh
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*BTCScriptConfig) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*BTCScriptConfig_SimpleType_)(nil),
		(*BTCScriptConfig_MultisigP2Wsh)(nil),
	}
}

type BTCScriptConfig_Multisig struct {
	Threshold            uint32   `protobuf:"varint,1,opt,name=threshold,proto3" json:"threshold,omitempty"`
	Xpubs                []*XPub  `protobuf:"bytes,2,rep,name=xpubs,proto3" json:"xpubs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BTCScriptConfig_Multisig) Reset()         { *m = BTCScriptConfig_Multisig{} }
func (m *BTCScriptConfig_Multisig) String() string { return proto.CompactTextString(m) }
func (*BTCScriptConfig_Multisig) ProtoMessage()    {}
func (*BTCScriptConfig_Multisig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a38f9ffa5c78f451, []int{0, 0}
}

func (m *BTCScriptConfig_Multisig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BTCScriptConfig_Multisig.Unmarshal(m, b)
}
func (m *BTCScriptConfig_Multisig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BTCScriptConfig_Multisig.Marshal(b, m, deterministic)
}
func (m *BTCScriptConfig_Multisig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BTCScriptConfig_Multisig.Merge(m, src)
}
func (m *BTCScriptConfig_Multisig) XXX_Size() int {
	return xxx_messageInfo_BTCScriptConfig_Multisig.Size(m)
}
func (m *BTCScriptConfig_Multisig) XXX_DiscardUnknown() {
	xxx_messageInfo_BTCScriptConfig_Multisig.DiscardUnknown(m)
}

var xxx_messageInfo_BTCScriptConfig_Multisig proto.InternalMessageInfo

func (m *BTCScriptConfig_Multisig) GetThreshold() uint32 {
	if m != nil {
		return m.Threshold
	}
	return 0
}

func (m *BTCScriptConfig_Multisig) GetXpubs() []*XPub {
	if m != nil {
		return m.Xpubs
	}
	return nil
}

type BTCPubRequest struct {
	Coin    BTCCoin  `protobuf:"varint,1,opt,name=coin,proto3,enum=BTCCoin" json:"coin,omitempty"`
	Keypath []uint32 `protobuf:"varint,2,rep,packed,name=keypath,proto3" json:"keypath,omitempty"`
	// Types that are valid to be assigned to Output:
	//	*BTCPubRequest_XpubType
	//	*BTCPubRequest_ScriptConfig
	Output               isBTCPubRequest_Output `protobuf_oneof:"output"`
	Display              bool                   `protobuf:"varint,5,opt,name=display,proto3" json:"display,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *BTCPubRequest) Reset()         { *m = BTCPubRequest{} }
func (m *BTCPubRequest) String() string { return proto.CompactTextString(m) }
func (*BTCPubRequest) ProtoMessage()    {}
func (*BTCPubRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a38f9ffa5c78f451, []int{1}
}

func (m *BTCPubRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BTCPubRequest.Unmarshal(m, b)
}
func (m *BTCPubRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BTCPubRequest.Marshal(b, m, deterministic)
}
func (m *BTCPubRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BTCPubRequest.Merge(m, src)
}
func (m *BTCPubRequest) XXX_Size() int {
	return xxx_messageInfo_BTCPubRequest.Size(m)
}
func (m *BTCPubRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BTCPubRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BTCPubRequest proto.InternalMessageInfo

func (m *BTCPubRequest) GetCoin() BTCCoin {
	if m != nil {
		return m.Coin
	}
	return BTCCoin_BTC
}

func (m *BTCPubRequest) GetKeypath() []uint32 {
	if m != nil {
		return m.Keypath
	}
	return nil
}

type isBTCPubRequest_Output interface {
	isBTCPubRequest_Output()
}

type BTCPubRequest_XpubType struct {
	XpubType BTCPubRequest_XPubType `protobuf:"varint,3,opt,name=xpub_type,json=xpubType,proto3,enum=BTCPubRequest_XPubType,oneof"`
}

type BTCPubRequest_ScriptConfig struct {
	ScriptConfig *BTCScriptConfig `protobuf:"bytes,4,opt,name=script_config,json=scriptConfig,proto3,oneof"`
}

func (*BTCPubRequest_XpubType) isBTCPubRequest_Output() {}

func (*BTCPubRequest_ScriptConfig) isBTCPubRequest_Output() {}

func (m *BTCPubRequest) GetOutput() isBTCPubRequest_Output {
	if m != nil {
		return m.Output
	}
	return nil
}

func (m *BTCPubRequest) GetXpubType() BTCPubRequest_XPubType {
	if x, ok := m.GetOutput().(*BTCPubRequest_XpubType); ok {
		return x.XpubType
	}
	return BTCPubRequest_TPUB
}

func (m *BTCPubRequest) GetScriptConfig() *BTCScriptConfig {
	if x, ok := m.GetOutput().(*BTCPubRequest_ScriptConfig); ok {
		return x.ScriptConfig
	}
	return nil
}

func (m *BTCPubRequest) GetDisplay() bool {
	if m != nil {
		return m.Display
	}
	return false
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*BTCPubRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*BTCPubRequest_XpubType)(nil),
		(*BTCPubRequest_ScriptConfig)(nil),
	}
}

type BTCSignInitRequest struct {
	Coin                 BTCCoin          `protobuf:"varint,1,opt,name=coin,proto3,enum=BTCCoin" json:"coin,omitempty"`
	ScriptConfig         *BTCScriptConfig `protobuf:"bytes,2,opt,name=script_config,json=scriptConfig,proto3" json:"script_config,omitempty"`
	Bip44Account         uint32           `protobuf:"varint,3,opt,name=bip44_account,json=bip44Account,proto3" json:"bip44_account,omitempty"`
	Version              uint32           `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	NumInputs            uint32           `protobuf:"varint,5,opt,name=num_inputs,json=numInputs,proto3" json:"num_inputs,omitempty"`
	NumOutputs           uint32           `protobuf:"varint,6,opt,name=num_outputs,json=numOutputs,proto3" json:"num_outputs,omitempty"`
	Locktime             uint32           `protobuf:"varint,7,opt,name=locktime,proto3" json:"locktime,omitempty"`
	KeypathAccount       []uint32         `protobuf:"varint,8,rep,packed,name=keypath_account,json=keypathAccount,proto3" json:"keypath_account,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *BTCSignInitRequest) Reset()         { *m = BTCSignInitRequest{} }
func (m *BTCSignInitRequest) String() string { return proto.CompactTextString(m) }
func (*BTCSignInitRequest) ProtoMessage()    {}
func (*BTCSignInitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a38f9ffa5c78f451, []int{2}
}

func (m *BTCSignInitRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BTCSignInitRequest.Unmarshal(m, b)
}
func (m *BTCSignInitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BTCSignInitRequest.Marshal(b, m, deterministic)
}
func (m *BTCSignInitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BTCSignInitRequest.Merge(m, src)
}
func (m *BTCSignInitRequest) XXX_Size() int {
	return xxx_messageInfo_BTCSignInitRequest.Size(m)
}
func (m *BTCSignInitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BTCSignInitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BTCSignInitRequest proto.InternalMessageInfo

func (m *BTCSignInitRequest) GetCoin() BTCCoin {
	if m != nil {
		return m.Coin
	}
	return BTCCoin_BTC
}

func (m *BTCSignInitRequest) GetScriptConfig() *BTCScriptConfig {
	if m != nil {
		return m.ScriptConfig
	}
	return nil
}

func (m *BTCSignInitRequest) GetBip44Account() uint32 {
	if m != nil {
		return m.Bip44Account
	}
	return 0
}

func (m *BTCSignInitRequest) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *BTCSignInitRequest) GetNumInputs() uint32 {
	if m != nil {
		return m.NumInputs
	}
	return 0
}

func (m *BTCSignInitRequest) GetNumOutputs() uint32 {
	if m != nil {
		return m.NumOutputs
	}
	return 0
}

func (m *BTCSignInitRequest) GetLocktime() uint32 {
	if m != nil {
		return m.Locktime
	}
	return 0
}

func (m *BTCSignInitRequest) GetKeypathAccount() []uint32 {
	if m != nil {
		return m.KeypathAccount
	}
	return nil
}

type BTCSignNextResponse struct {
	Type         BTCSignNextResponse_Type `protobuf:"varint,1,opt,name=type,proto3,enum=BTCSignNextResponse_Type" json:"type,omitempty"`
	Index        uint32                   `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	HasSignature bool                     `protobuf:"varint,3,opt,name=has_signature,json=hasSignature,proto3" json:"has_signature,omitempty"`
	// 64 bytes (32 bytes big endian R, 32 bytes big endian S). Only if has_signature is true.
	Signature            []byte   `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BTCSignNextResponse) Reset()         { *m = BTCSignNextResponse{} }
func (m *BTCSignNextResponse) String() string { return proto.CompactTextString(m) }
func (*BTCSignNextResponse) ProtoMessage()    {}
func (*BTCSignNextResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a38f9ffa5c78f451, []int{3}
}

func (m *BTCSignNextResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BTCSignNextResponse.Unmarshal(m, b)
}
func (m *BTCSignNextResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BTCSignNextResponse.Marshal(b, m, deterministic)
}
func (m *BTCSignNextResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BTCSignNextResponse.Merge(m, src)
}
func (m *BTCSignNextResponse) XXX_Size() int {
	return xxx_messageInfo_BTCSignNextResponse.Size(m)
}
func (m *BTCSignNextResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BTCSignNextResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BTCSignNextResponse proto.InternalMessageInfo

func (m *BTCSignNextResponse) GetType() BTCSignNextResponse_Type {
	if m != nil {
		return m.Type
	}
	return BTCSignNextResponse_INPUT
}

func (m *BTCSignNextResponse) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *BTCSignNextResponse) GetHasSignature() bool {
	if m != nil {
		return m.HasSignature
	}
	return false
}

func (m *BTCSignNextResponse) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type BTCSignInputRequest struct {
	PrevOutHash          []byte   `protobuf:"bytes,1,opt,name=prevOutHash,proto3" json:"prevOutHash,omitempty"`
	PrevOutIndex         uint32   `protobuf:"varint,2,opt,name=prevOutIndex,proto3" json:"prevOutIndex,omitempty"`
	PrevOutValue         uint64   `protobuf:"varint,3,opt,name=prevOutValue,proto3" json:"prevOutValue,omitempty"`
	Sequence             uint32   `protobuf:"varint,4,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Keypath              []uint32 `protobuf:"varint,6,rep,packed,name=keypath,proto3" json:"keypath,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BTCSignInputRequest) Reset()         { *m = BTCSignInputRequest{} }
func (m *BTCSignInputRequest) String() string { return proto.CompactTextString(m) }
func (*BTCSignInputRequest) ProtoMessage()    {}
func (*BTCSignInputRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a38f9ffa5c78f451, []int{4}
}

func (m *BTCSignInputRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BTCSignInputRequest.Unmarshal(m, b)
}
func (m *BTCSignInputRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BTCSignInputRequest.Marshal(b, m, deterministic)
}
func (m *BTCSignInputRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BTCSignInputRequest.Merge(m, src)
}
func (m *BTCSignInputRequest) XXX_Size() int {
	return xxx_messageInfo_BTCSignInputRequest.Size(m)
}
func (m *BTCSignInputRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BTCSignInputRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BTCSignInputRequest proto.InternalMessageInfo

func (m *BTCSignInputRequest) GetPrevOutHash() []byte {
	if m != nil {
		return m.PrevOutHash
	}
	return nil
}

func (m *BTCSignInputRequest) GetPrevOutIndex() uint32 {
	if m != nil {
		return m.PrevOutIndex
	}
	return 0
}

func (m *BTCSignInputRequest) GetPrevOutValue() uint64 {
	if m != nil {
		return m.PrevOutValue
	}
	return 0
}

func (m *BTCSignInputRequest) GetSequence() uint32 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *BTCSignInputRequest) GetKeypath() []uint32 {
	if m != nil {
		return m.Keypath
	}
	return nil
}

type BTCSignOutputRequest struct {
	Ours bool          `protobuf:"varint,1,opt,name=ours,proto3" json:"ours,omitempty"`
	Type BTCOutputType `protobuf:"varint,2,opt,name=type,proto3,enum=BTCOutputType" json:"type,omitempty"`
	// 20 bytes for p2pkh, p2sh, pw2wpkh. 32 bytes for p2wsh.
	Value                uint64   `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
	Hash                 []byte   `protobuf:"bytes,4,opt,name=hash,proto3" json:"hash,omitempty"`
	Keypath              []uint32 `protobuf:"varint,5,rep,packed,name=keypath,proto3" json:"keypath,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BTCSignOutputRequest) Reset()         { *m = BTCSignOutputRequest{} }
func (m *BTCSignOutputRequest) String() string { return proto.CompactTextString(m) }
func (*BTCSignOutputRequest) ProtoMessage()    {}
func (*BTCSignOutputRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a38f9ffa5c78f451, []int{5}
}

func (m *BTCSignOutputRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BTCSignOutputRequest.Unmarshal(m, b)
}
func (m *BTCSignOutputRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BTCSignOutputRequest.Marshal(b, m, deterministic)
}
func (m *BTCSignOutputRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BTCSignOutputRequest.Merge(m, src)
}
func (m *BTCSignOutputRequest) XXX_Size() int {
	return xxx_messageInfo_BTCSignOutputRequest.Size(m)
}
func (m *BTCSignOutputRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BTCSignOutputRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BTCSignOutputRequest proto.InternalMessageInfo

func (m *BTCSignOutputRequest) GetOurs() bool {
	if m != nil {
		return m.Ours
	}
	return false
}

func (m *BTCSignOutputRequest) GetType() BTCOutputType {
	if m != nil {
		return m.Type
	}
	return BTCOutputType_UNKNOWN
}

func (m *BTCSignOutputRequest) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *BTCSignOutputRequest) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *BTCSignOutputRequest) GetKeypath() []uint32 {
	if m != nil {
		return m.Keypath
	}
	return nil
}

func init() {
	proto.RegisterEnum("BTCCoin", BTCCoin_name, BTCCoin_value)
	proto.RegisterEnum("BTCOutputType", BTCOutputType_name, BTCOutputType_value)
	proto.RegisterEnum("BTCScriptConfig_SimpleType", BTCScriptConfig_SimpleType_name, BTCScriptConfig_SimpleType_value)
	proto.RegisterEnum("BTCPubRequest_XPubType", BTCPubRequest_XPubType_name, BTCPubRequest_XPubType_value)
	proto.RegisterEnum("BTCSignNextResponse_Type", BTCSignNextResponse_Type_name, BTCSignNextResponse_Type_value)
	proto.RegisterType((*BTCScriptConfig)(nil), "BTCScriptConfig")
	proto.RegisterType((*BTCScriptConfig_Multisig)(nil), "BTCScriptConfig.Multisig")
	proto.RegisterType((*BTCPubRequest)(nil), "BTCPubRequest")
	proto.RegisterType((*BTCSignInitRequest)(nil), "BTCSignInitRequest")
	proto.RegisterType((*BTCSignNextResponse)(nil), "BTCSignNextResponse")
	proto.RegisterType((*BTCSignInputRequest)(nil), "BTCSignInputRequest")
	proto.RegisterType((*BTCSignOutputRequest)(nil), "BTCSignOutputRequest")
}

func init() { proto.RegisterFile("btc.proto", fileDescriptor_a38f9ffa5c78f451) }

var fileDescriptor_a38f9ffa5c78f451 = []byte{
	// 798 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0xc1, 0x8e, 0xe3, 0x44,
	0x10, 0x8d, 0x1d, 0x27, 0x71, 0x2a, 0xf1, 0x4c, 0xd4, 0xac, 0x84, 0x99, 0x5d, 0x44, 0x64, 0x0e,
	0x3b, 0xac, 0x44, 0x90, 0xc2, 0x02, 0x37, 0x24, 0x12, 0x16, 0x65, 0xb4, 0x90, 0x58, 0x1d, 0x67,
	0x67, 0xe1, 0x12, 0x39, 0x1e, 0x33, 0x6e, 0x6d, 0x62, 0x9b, 0x74, 0x7b, 0x98, 0xf9, 0x0c, 0xf8,
	0x06, 0xae, 0x1c, 0xf9, 0x05, 0xbe, 0x0b, 0x55, 0xb5, 0x3d, 0x71, 0x02, 0x07, 0x6e, 0xaf, 0x5e,
	0x57, 0xb7, 0x5f, 0xbd, 0xea, 0x6a, 0x43, 0x77, 0xa3, 0xa2, 0x51, 0xbe, 0xcf, 0x54, 0x76, 0xd1,
	0x8f, 0xb2, 0xdd, 0x2e, 0x4b, 0x75, 0xe4, 0xfd, 0x66, 0xc2, 0xf9, 0x24, 0x98, 0x2e, 0xa3, 0xbd,
	0xc8, 0xd5, 0x34, 0x4b, 0x7f, 0x16, 0xb7, 0xec, 0x6b, 0xe8, 0x49, 0xb1, 0xcb, 0xb7, 0xf1, 0x5a,
	0x3d, 0xe4, 0xb1, 0x6b, 0x0c, 0x8d, 0xcb, 0xb3, 0xf1, 0xd3, 0xd1, 0x49, 0xda, 0x68, 0x49, 0x39,
	0xc1, 0x43, 0x1e, 0xcf, 0x1a, 0x1c, 0xe4, 0x63, 0xc4, 0x26, 0x70, 0xb6, 0x2b, 0xb6, 0x4a, 0x48,
	0x71, 0xbb, 0xce, 0xc7, 0xbf, 0xca, 0xc4, 0x35, 0x87, 0xc6, 0x65, 0x6f, 0xfc, 0xc1, 0xbf, 0x8e,
	0xf8, 0xa1, 0x4c, 0x9b, 0x35, 0xb8, 0x53, 0x6d, 0xf1, 0x71, 0xc7, 0xc5, 0x2b, 0xb0, 0xab, 0x45,
	0xf6, 0x0c, 0xba, 0x2a, 0xd9, 0xc7, 0x32, 0xc9, 0xb6, 0x37, 0xa4, 0xc6, 0xe1, 0x07, 0x82, 0x3d,
	0x85, 0xd6, 0x7d, 0x5e, 0x6c, 0xa4, 0x6b, 0x0e, 0x9b, 0x97, 0xbd, 0x71, 0x6b, 0xf4, 0xd6, 0x2f,
	0x36, 0x5c, 0x73, 0xde, 0x27, 0x00, 0x07, 0x99, 0xec, 0x1c, 0x7a, 0xfe, 0xf8, 0xda, 0x7f, 0x3d,
	0x5b, 0xfb, 0xe3, 0xe5, 0x6c, 0xd0, 0x60, 0x00, 0x6d, 0x4d, 0x0c, 0x8c, 0x89, 0x0d, 0xed, 0x88,
	0x54, 0x79, 0x7f, 0x98, 0xe0, 0x4c, 0x82, 0x29, 0x1e, 0x13, 0xff, 0x52, 0xc4, 0x52, 0xb1, 0x67,
	0x60, 0x45, 0x99, 0x48, 0x4b, 0x2b, 0x6c, 0xac, 0x63, 0x9a, 0x89, 0x94, 0x13, 0xcb, 0x5c, 0xe8,
	0xbc, 0x8b, 0x1f, 0xf2, 0x50, 0x25, 0xa4, 0xc1, 0xe1, 0x55, 0xc8, 0xbe, 0x84, 0x2e, 0xea, 0xd0,
	0x3e, 0x36, 0x69, 0xf3, 0xfb, 0xa3, 0xa3, 0xa3, 0x49, 0x6d, 0xe9, 0xa1, 0x8d, 0xb9, 0x24, 0xf4,
	0x2b, 0x70, 0x24, 0xf9, 0xb4, 0xd6, 0x92, 0x5c, 0x8b, 0x0c, 0x1c, 0x9c, 0x1a, 0x38, 0x6b, 0xf0,
	0xbe, 0xac, 0xb7, 0xce, 0x85, 0xce, 0x8d, 0x90, 0xf9, 0x36, 0x7c, 0x70, 0x5b, 0x43, 0xe3, 0xd2,
	0xe6, 0x55, 0xe8, 0x7d, 0x07, 0x76, 0xf5, 0x29, 0x66, 0x83, 0x15, 0xf8, 0xab, 0xc9, 0xa0, 0x81,
	0xe8, 0x2d, 0x22, 0x03, 0xd1, 0x8f, 0x88, 0x4c, 0x44, 0x3f, 0x21, 0x6a, 0x22, 0x7a, 0x83, 0xc8,
	0x42, 0xb4, 0x42, 0xd4, 0x42, 0x9b, 0xb2, 0x42, 0xe5, 0x85, 0xf2, 0xfe, 0x34, 0x81, 0xa1, 0x1e,
	0x71, 0x9b, 0x5e, 0xa5, 0x42, 0xfd, 0x3f, 0xaf, 0xbe, 0x38, 0xad, 0xcc, 0xfc, 0xef, 0xca, 0x4e,
	0xea, 0xfa, 0x18, 0x9c, 0x8d, 0xc8, 0x5f, 0xbe, 0x5c, 0x87, 0x51, 0x94, 0x15, 0xa9, 0x22, 0x33,
	0x1d, 0xde, 0x27, 0xf2, 0x1b, 0xcd, 0x61, 0xf1, 0x77, 0xf1, 0x5e, 0x8a, 0x2c, 0x25, 0xbf, 0x1c,
	0x5e, 0x85, 0xec, 0x43, 0x80, 0xb4, 0xd8, 0xad, 0x45, 0x9a, 0x17, 0x4a, 0x92, 0x33, 0x0e, 0xef,
	0xa6, 0xc5, 0xee, 0x8a, 0x08, 0xf6, 0x11, 0xf4, 0x70, 0x59, 0xd7, 0x25, 0xdd, 0x36, 0xad, 0xe3,
	0x8e, 0x85, 0x66, 0xd8, 0x05, 0xd8, 0xdb, 0x2c, 0x7a, 0xa7, 0xc4, 0x2e, 0x76, 0x3b, 0xb4, 0xfa,
	0x18, 0xb3, 0xe7, 0x70, 0x5e, 0xb6, 0xfb, 0x51, 0x9c, 0x4d, 0xb7, 0xe0, 0xac, 0xa4, 0x4b, 0x79,
	0xde, 0xdf, 0x06, 0xbc, 0x57, 0xfa, 0x35, 0x8f, 0xef, 0x15, 0x8f, 0x65, 0x9e, 0xa5, 0x32, 0x66,
	0x9f, 0x82, 0x55, 0x9b, 0x33, 0x3d, 0x24, 0x27, 0x39, 0x23, 0x6c, 0x1b, 0xa7, 0x34, 0xf6, 0x04,
	0x5a, 0x22, 0xbd, 0x89, 0xef, 0xc9, 0x39, 0x87, 0xeb, 0x00, 0x0d, 0x4a, 0x42, 0xb9, 0x96, 0xe2,
	0x36, 0x0d, 0x55, 0xb1, 0xd7, 0xb7, 0xcd, 0xe6, 0xfd, 0x24, 0x94, 0xcb, 0x8a, 0xc3, 0x41, 0x3a,
	0x24, 0xa0, 0x45, 0x7d, 0x7e, 0x20, 0xbc, 0xe7, 0x60, 0xd1, 0xed, 0xe8, 0x42, 0xeb, 0x6a, 0xee,
	0xaf, 0x02, 0x3d, 0x1f, 0x8b, 0x55, 0x80, 0x98, 0x2e, 0xc8, 0xb7, 0x8b, 0xf9, 0xab, 0x81, 0xe9,
	0xfd, 0x75, 0x28, 0x84, 0x0c, 0xac, 0x3a, 0x3f, 0x84, 0x5e, 0xbe, 0x8f, 0xef, 0x16, 0x85, 0x9a,
	0x85, 0x32, 0xa1, 0x7a, 0xfa, 0xbc, 0x4e, 0x31, 0x0f, 0xfa, 0x65, 0x78, 0x55, 0x2b, 0xe1, 0x88,
	0xab, 0xe5, 0xbc, 0x09, 0xb7, 0x85, 0x2e, 0xc4, 0xe2, 0x47, 0x1c, 0xf6, 0x43, 0xe2, 0x47, 0xd3,
	0x28, 0x2e, 0x5b, 0xfd, 0x18, 0xd7, 0xa7, 0xb1, 0x7d, 0x34, 0x8d, 0xde, 0xef, 0x06, 0x3c, 0x29,
	0x75, 0xeb, 0xc6, 0x56, 0xc2, 0x19, 0x58, 0x59, 0xb1, 0x97, 0xa4, 0xd8, 0xe6, 0x84, 0x99, 0x57,
	0x76, 0xc5, 0xa4, 0xae, 0x9c, 0x61, 0x57, 0xf4, 0xa6, 0xe3, 0x56, 0xdc, 0xd5, 0x34, 0xea, 0x00,
	0x4f, 0x4b, 0xb0, 0x7e, 0x6d, 0x30, 0xe1, 0xba, 0xa8, 0xd6, 0x91, 0xa8, 0x17, 0x9f, 0x41, 0xa7,
	0x9c, 0x10, 0xd6, 0x81, 0xe6, 0x24, 0x98, 0xea, 0xa9, 0x0c, 0x10, 0x19, 0x48, 0x7d, 0x1f, 0x4c,
	0xf5, 0x50, 0x06, 0x88, 0x9a, 0x2f, 0x66, 0xf4, 0x38, 0x1d, 0xb4, 0xb0, 0x1e, 0x74, 0x56, 0xf3,
	0xd7, 0xf3, 0xc5, 0xf5, 0x7c, 0xd0, 0xc0, 0xe6, 0xf9, 0x63, 0x7a, 0xd0, 0x70, 0x0b, 0x3d, 0x73,
	0x66, 0xed, 0x99, 0x6b, 0xea, 0x84, 0xeb, 0xe5, 0x6c, 0x60, 0x6d, 0xda, 0xf4, 0x0b, 0xf8, 0xfc,
	0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x77, 0x53, 0x99, 0xf9, 0x1d, 0x06, 0x00, 0x00,
}
